import telebot
import random
from helpers import *
from telebot import types

bot = telebot.TeleBot(config.token) 
welcome = start_helpers

random_pet_names = ['–ü–∏—Ä–æ–∂–æ–∫', '–ü—Ä—è–Ω–∏–∫', '–ö–∏—Å–∫–∞', '–ö—Ä—ã—Å–∫–∞', '–ë—É–ª–æ—á–∫–∞', '–ò—Ä–∏—Å–∫–∞']

class pet_info:
	def pet_name_to_file(message):
		with open('base.txt','a',encoding='utf-8') as f:
			f.write(str(message.from_user.id)+':'+gameplay.pet_name+'\n')
		return
	def pet_name_check(message):
		with open('base.txt') as f:
			for line in f:
				if str(message.from_user.id) in line.strip('\n').split(':'):
					gameplay.pet_name = line.strip().split(':')[1]
					return gameplay.pet_name
				else:
					return False
	
	

def send_help(message): #–ø–æ–º–æ—â—å
	if message.text=='/help' or message.text=='–ü–æ–º–æ—â—å':
		bot.send_message(message.chat.id, welcome.help_text)
		return

def no_understand(message):
	bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é üëâüëà')
	bot.send_message(message.chat.id, welcome.help_text)

def exit(message):
	bot.send_message(message.chat.id, '–î–æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏!')
	return

def keyboard(markup, *buttons):
    markup.add(*buttons)
    return markup

def send_reg(message):
	if message.text=='–ù–∞—á–Ω–µ–º!':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
		keyboard(markup,'–†–∞–Ω–¥–æ–º–Ω–æ–µ –∏–º—è', '–í—ã—Ö–æ–¥')
		bot.send_photo(message.chat.id, photo=open(gameplay.nachalo_pic, 'rb'), caption=gameplay.nachalo_text, reply_markup=markup)
		bot.register_next_step_handler(message, register_check)
	elif message.text=='–ü–æ–º–æ—â—å':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
		keyboard(markup, '–°—Ç–∞—Ä—Ç')
		bot.send_message(message.chat.id, welcome.help_text, reply_markup=markup)
		bot.register_next_step_handler(message, send_welcome)
	elif message.text=='–í—ã—Ö–æ–¥':
		exit(message)
	else:
		no_understand(message)


def  register_check(message):
	if message.text=='–í—ã—Ö–æ–¥':
		welcome.bn = 0
		exit(message)
	elif message.text=='–†–∞–Ω–¥–æ–º–Ω–æ–µ –∏–º—è':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
		keyboard(markup, '–î—Ä—É–≥–æ–µ –∏–º—è', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
		gameplay.pet_name = random.choice(random_pet_names)
		bot.send_message(message.chat.id, '–ò–º—è —Ç–≤–æ–µ–≥–æ –∫–æ—Ç–µ–Ω–∫–∞ - ' + gameplay.pet_name + '! üëâüëà –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –∏–º—è?',  reply_markup=markup)
		bot.register_next_step_handler(message, pet_name_check)
	else:
		gameplay.pet_name = message.text
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
		keyboard(markup, '–î—Ä—É–≥–æ–µ –∏–º—è', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
		bot.send_message(message.chat.id, '–ò–º—è —Ç–≤–æ–µ–≥–æ –∫–æ—Ç–µ–Ω–∫–∞ - ' + gameplay.pet_name + '! üëâüëà –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –∏–º—è?',  reply_markup=markup)
		bot.register_next_step_handler(message, pet_name_check)


def pet_name_check(message):
	if message.text=='–î—Ä—É–≥–æ–µ –∏–º—è':
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
		keyboard(markup,'–†–∞–Ω–¥–æ–º–Ω–æ–µ –∏–º—è', '–í—ã—Ö–æ–¥')
		bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –†–∞–Ω–¥–æ–º–Ω–æ–µ –∏–º—è',  reply_markup=markup)
		bot.register_next_step_handler(message, register_check)
	elif message.text=='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å':
		pet_info.pet_name_to_file(message)
		pet_name_register(message)
	else:
		no_understand(message)

def pet_name_register(message):
	remove_keayboard = types.ReplyKeyboardRemove()
	bot.send_message(message.chat.id, '–ò–º—è –∫–æ—Ç–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', reply_markup=remove_keayboard)
	welcome.bn = 1
	return


def play_check(message):
	if message.text=='–ü—Ä–æ–¥–æ–ª–∂–∏–º!':
		play_go_on(message)
	elif message.text=='–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!':
		welcome.bn = 0
		send_welcome(message)
	elif message.text=='–ü–æ–º–æ—â—å':
		send_help(message)
	elif message.text=='–í—ã—Ö–æ–¥':
		exit(message)
	else:
		no_understand(message)

def play_go_on(message):
	remove_keayboard = types.ReplyKeyboardRemove()
	bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –∫–æ—Ç–µ–Ω–æ–∫ {gameplay.pet_name} —É–∂–µ —Å–æ—Å–∫—É—á–∏–ª—Å—è (=^ÔΩ•œâÔΩ•^=)', reply_markup=remove_keayboard)
	return


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π –∏–ª–∏ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è

@bot.message_handler(commands=['start'])
def send_welcome(message): #—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if welcome.bn == 0:#–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–∏
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
		keyboard(markup, '–ù–∞—á–Ω–µ–º!', '–ü–æ–º–æ—â—å', '–í—ã—Ö–æ–¥')
		bot.send_photo(message.chat.id, photo=open(welcome.start_pic, 'rb'), caption=welcome.welcome_text, reply_markup=markup)
		bot.register_next_step_handler(message, send_reg)
	elif welcome.bn!=0: #–ï—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
		keyboard(markup, '–ü—Ä–æ–¥–æ–ª–∂–∏–º!', '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!', '–ü–æ–º–æ—â—å', '–í—ã—Ö–æ–¥')
		bot.send_photo(message.chat.id, photo=open(welcome.start_pic, 'rb'), caption=f'{welcome.welcome_text}\n{gameplay.prodolj_text}', reply_markup=markup)
		bot.register_next_step_handler(message, play_check)

bot.infinity_polling()